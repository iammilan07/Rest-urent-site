name: Fetch Vault Secrets Securely via OIDC
on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # Required for OIDC
  contents: read

jobs:
  fetch-vault-secrets:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout your code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Install Vault CLI and jq manually (works on all runners)
      - name: Install Vault CLI and jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y vault jq

      # 3️⃣ Authenticate to Vault using GitHub OIDC
      - name: Authenticate with Vault via OIDC
        id: vault_login
        env:
          VAULT_ADDR: https://openbao.app.rigohr.com
        run: |
          set -e
          # Request GitHub OIDC token
          OIDC_TOKEN=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                       "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://vault/login" | jq -r '.value')

          # Login to Vault using jwt-github auth backend
          VAULT_TOKEN=$(vault write -field=token auth/jwt-github/login \
                          role="rigohr-github-test-role" jwt="$OIDC_TOKEN")

          # Export Vault token securely
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      # 4️⃣ Fetch Vault secret and store as environment variable
      - name: Fetch secret from Vault
        env:
          VAULT_ADDR: https://openbao.app.rigohr.com
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        run: |
          set -e
          # Fetch secret and extract only value
          MY_SECRET=$(vault kv get -field=test kvv2/github/test)
          echo "MY_SECRET=$MY_SECRET" >> $GITHUB_ENV

      # 5️⃣ Use the secret securely in later steps
      - name: Use secret
        run: |
          # Example usage: print length to avoid revealing it
          echo "Secret length: ${#MY_SECRET}"

          # Example: pass secret to Node.js app
          # node server.js --secret "$MY_SECRET"

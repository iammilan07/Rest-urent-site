name: Fetch OpenBao Secrets via OIDC

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  id-token: write   # Required for OIDC token
  contents: read    # Required for checkout

jobs:
  fetch-openbao-secrets:
    runs-on: ubuntu-latest
    
    env:
      BAO_ADDR: https://openbao.app.rigohr.com

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install OpenBao CLI and jq
      - name: Install OpenBao CLI and jq
        run: |
          set -e
          echo "📦 Installing dependencies..."
          
          # Install jq and unzip
          sudo apt-get update -y
          sudo apt-get install -y jq unzip curl
          
          # Download and install OpenBao binary
          BAO_VERSION="2.0.0"
          echo "⬇️ Downloading OpenBao ${BAO_VERSION}..."
          wget -q https://github.com/openbao/openbao/releases/download/v${BAO_VERSION}/bao_${BAO_VERSION}_linux_amd64.zip
          
          echo "📂 Extracting OpenBao..."
          unzip -q bao_${BAO_VERSION}_linux_amd64.zip
          
          echo "🔧 Installing OpenBao..."
          sudo mv bao /usr/local/bin/
          sudo chmod +x /usr/local/bin/bao
          
          # Verify installation
          echo "✅ OpenBao installed successfully:"
          bao version

      # Step 3: Authenticate to OpenBao using GitHub OIDC
      - name: Authenticate with OpenBao via OIDC
        id: bao_login
        run: |
          set -e
          echo "🔐 Starting OpenBao authentication..."
          
          # Request GitHub OIDC token with correct audience
          echo "🎫 Requesting OIDC token from GitHub..."
          OIDC_TOKEN=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                       "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://vault/login" | jq -r '.value')
          
          # Validate OIDC token
          if [ -z "$OIDC_TOKEN" ] || [ "$OIDC_TOKEN" = "null" ]; then
            echo "❌ ERROR: Failed to retrieve OIDC token from GitHub"
            exit 1
          fi
          
          echo "✅ OIDC token retrieved successfully"
          
          # Login to OpenBao using jwt-github auth backend
          echo "🔑 Authenticating with OpenBao..."
          BAO_TOKEN=$(bao write -field=token auth/jwt-github/login \
                          role="rigohr-github-test-role" \
                          jwt="$OIDC_TOKEN" 2>&1)
          
          # Check if authentication was successful
          if [ $? -ne 0 ]; then
            echo "❌ ERROR: OpenBao authentication failed"
            echo "$BAO_TOKEN"
            exit 1
          fi
          
          if [ -z "$BAO_TOKEN" ]; then
            echo "❌ ERROR: OpenBao token is empty"
            exit 1
          fi
          
          echo "✅ Successfully authenticated with OpenBao"
          
          # Mask the token in GitHub Actions logs
          echo "::add-mask::$BAO_TOKEN"
          
          # Export token for subsequent steps
          echo "BAO_TOKEN=$BAO_TOKEN" >> $GITHUB_ENV

      # Step 4: Fetch secret from OpenBao
      - name: Fetch secret from OpenBao
        run: |
          set -e
          echo "📥 Fetching secret from OpenBao..."
          
          # Fetch the secret from kvv2/github/test
          MY_SECRET=$(bao kv get -field=test kvv2/github/test 2>&1)
          
          # Check if secret fetch was successful
          if [ $? -ne 0 ]; then
            echo "❌ ERROR: Failed to fetch secret from OpenBao"
            echo "$MY_SECRET"
            exit 1
          fi
          
          if [ -z "$MY_SECRET" ]; then
            echo "❌ ERROR: Secret value is empty"
            exit 1
          fi
          
          echo "✅ Secret retrieved successfully from kvv2/github/test"
          
          # Mask the secret in GitHub Actions logs
          echo "::add-mask::$MY_SECRET"
          
          # Export secret for subsequent steps
          echo "MY_SECRET=$MY_SECRET" >> $GITHUB_ENV

      # Step 5: Verify and use the secret
      - name: Use secret
        run: |
          echo "🎉 Secret is ready to use!"
          echo "📏 Secret length: ${#MY_SECRET} characters"
          
          # Example: Use secret for various purposes
          # Uncomment and modify based on your needs:
          
          # Example 1: Docker login
          # echo "$MY_SECRET" | docker login -u myusername --password-stdin registry.example.com
          
          # Example 2: Set as environment variable for app
          # export DATABASE_PASSWORD="$MY_SECRET"
          # node server.js
          
          # Example 3: Create Kubernetes secret
          # kubectl create secret generic app-secret --from-literal=password="$MY_SECRET"
          
          # Example 4: Use with Terraform
          # terraform apply -var="db_password=$MY_SECRET"
          
          # Example 5: SSH/Deploy
          # echo "$MY_SECRET" > ~/.ssh/deploy_key
          # chmod 600 ~/.ssh/deploy_key
          
          echo "✅ You can now use \$MY_SECRET in any subsequent step"

      # Step 6: Example deployment step
      - name: Deploy application (example)
        run: |
          echo "🚀 Deploying application..."
          echo "Using secret: ${MY_SECRET:0:4}****" # Show only first 4 chars
          
          # Add your actual deployment commands here
          # The secret is available as $MY_SECRET environment variable
          
          echo "✅ Deployment completed successfully"

      # Step 7: Cleanup (optional)
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          # Unset sensitive environment variables
          unset BAO_TOKEN
          unset MY_SECRET
          echo "✅ Cleanup completed"
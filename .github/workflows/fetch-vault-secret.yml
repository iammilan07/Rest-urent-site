name: Fetch Vault Secrets via OIDC

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  id-token: write   # Required for OIDC token
  contents: read    # Required for checkout

jobs:
  fetch-vault-secrets:
    runs-on: ubuntu-latest
    
    env:
      VAULT_ADDR: https://openbao.app.rigohr.com

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Vault CLI and jq
      - name: Install Vault CLI and jq
        run: |
          set -e
          echo "📦 Installing dependencies..."
          
          # Install jq and unzip
          sudo apt-get update -y
          sudo apt-get install -y jq unzip
          
          # Download and install Vault binary from HashiCorp
          VAULT_VERSION="1.18.2"
          echo "⬇️ Downloading Vault ${VAULT_VERSION}..."
          wget -q https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
          
          echo "📂 Extracting Vault..."
          unzip -q vault_${VAULT_VERSION}_linux_amd64.zip
          
          echo "🔧 Installing Vault..."
          sudo mv vault /usr/local/bin/
          sudo chmod +x /usr/local/bin/vault
          
          # Verify installation
          echo "✅ Vault installed successfully:"
          vault --version

      # Step 3: Authenticate to Vault using GitHub OIDC
      - name: Authenticate with Vault via OIDC
        id: vault_login
        run: |
          set -e
          echo "🔐 Starting Vault authentication..."
          
          # Request GitHub OIDC token with correct audience
          echo "🎫 Requesting OIDC token from GitHub..."
          OIDC_TOKEN=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                       "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://vault/login" | jq -r '.value')
          
          # Validate OIDC token
          if [ -z "$OIDC_TOKEN" ] || [ "$OIDC_TOKEN" = "null" ]; then
            echo "❌ ERROR: Failed to retrieve OIDC token from GitHub"
            exit 1
          fi
          
          echo "✅ OIDC token retrieved successfully"
          
          # Login to Vault using jwt-github auth backend
          echo "🔑 Authenticating with Vault..."
          VAULT_TOKEN=$(vault write -field=token auth/jwt-github/login \
                          role="rigohr-github-test-role" \
                          jwt="$OIDC_TOKEN" 2>&1)
          
          # Check if authentication was successful
          if [ $? -ne 0 ]; then
            echo "❌ ERROR: Vault authentication failed"
            echo "$VAULT_TOKEN"
            exit 1
          fi
          
          if [ -z "$VAULT_TOKEN" ]; then
            echo "❌ ERROR: Vault token is empty"
            exit 1
          fi
          
          echo "✅ Successfully authenticated with Vault"
          
          # Mask the token in GitHub Actions logs
          echo "::add-mask::$VAULT_TOKEN"
          
          # Export token for subsequent steps
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      # Step 4: Fetch secret from Vault
      - name: Fetch secret from Vault
        run: |
          set -e
          echo "📥 Fetching secret from Vault..."
          
          # Fetch the secret from kvv2/github/test
          MY_SECRET=$(vault kv get -field=test kvv2/github/test 2>&1)
          
          # Check if secret fetch was successful
          if [ $? -ne 0 ]; then
            echo "❌ ERROR: Failed to fetch secret from Vault"
            echo "$MY_SECRET"
            exit 1
          fi
          
          if [ -z "$MY_SECRET" ]; then
            echo "❌ ERROR: Secret value is empty"
            exit 1
          fi
          
          echo "✅ Secret retrieved successfully from kvv2/github/test"
          
          # Mask the secret in GitHub Actions logs
          echo "::add-mask::$MY_SECRET"
          
          # Export secret for subsequent steps
          echo "MY_SECRET=$MY_SECRET" >> $GITHUB_ENV

      # Step 5: Verify and use the secret
      - name: Use secret
        run: |
          echo "🎉 Secret is ready to use!"
          echo "📏 Secret length: ${#MY_SECRET} characters"
          
          echo "✅ You can now use \$MY_SECRET in any subsequent step"

      # Step 7: Cleanup (optional)
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          # Unset sensitive environment variables
          unset VAULT_TOKEN
          unset MY_SECRET
          echo "✅ Cleanup completed"
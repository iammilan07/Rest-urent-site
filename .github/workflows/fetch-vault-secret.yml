name: Fetch Vault Secrets Securely via OIDC
on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # Required for OIDC
  contents: read

jobs:
  fetch-vault-secrets:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout your code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Install Vault CLI and jq
      - name: Install Vault CLI and jq
        run: |
          set -e
          # Install jq
          sudo apt-get update -y
          sudo apt-get install -y jq unzip
          
          # Download and install Vault binary
          VAULT_VERSION="1.18.2"
          wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
          unzip vault_${VAULT_VERSION}_linux_amd64.zip
          sudo mv vault /usr/local/bin/
          sudo chmod +x /usr/local/bin/vault
          vault --version

      # 3️⃣ Authenticate to Vault using GitHub OIDC
      - name: Authenticate with Vault via OIDC
        id: vault_login
        env:
          VAULT_ADDR: https://openbao.app.rigohr.com
        run: |
          set -e
          
          # Request GitHub OIDC token
          OIDC_TOKEN=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                       "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://vault/login" | jq -r '.value')
          
          if [ -z "$OIDC_TOKEN" ] || [ "$OIDC_TOKEN" = "null" ]; then
            echo "❌ Failed to retrieve OIDC token"
            exit 1
          fi
          
          echo "✅ OIDC token retrieved successfully"
          
          # Login to Vault using jwt-github auth backend
          VAULT_TOKEN=$(vault write -field=token auth/jwt-github/login \
                          role="rigohr-github-test-role" jwt="$OIDC_TOKEN")
          
          if [ -z "$VAULT_TOKEN" ]; then
            echo "❌ Failed to authenticate with Vault"
            exit 1
          fi
          
          echo "✅ Successfully authenticated with Vault"
          
          # Export Vault token securely (masked in logs)
          echo "::add-mask::$VAULT_TOKEN"
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      # 4️⃣ Fetch Vault secret and store as environment variable
      - name: Fetch secret from Vault
        env:
          VAULT_ADDR: https://openbao.app.rigohr.com
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        run: |
          set -e
          
          # Fetch secret and extract only the value
          MY_SECRET=$(vault kv get -field=test kvv2/github/test)
          
          if [ -z "$MY_SECRET" ]; then
            echo "❌ Failed to retrieve secret"
            exit 1
          fi
          
          echo "✅ Secret retrieved successfully"
          
          # Mask the secret in logs
          echo "::add-mask::$MY_SECRET"
          echo "MY_SECRET=$MY_SECRET" >> $GITHUB_ENV

      # 5️⃣ Use the secret securely in later steps
      - name: Use secret
        run: |
          # Example usage: print length to avoid revealing it
          echo "✅ Secret is available and ready to use"
          echo "Secret length: ${#MY_SECRET}"
          
          # Example: Use secret in your application
          # echo "$MY_SECRET" | docker login -u myuser --password-stdin
          # export DATABASE_PASSWORD="$MY_SECRET"
          # node server.js

      # 6️⃣ Example: Use in deployment
      - name: Deploy with secret
        run: |
          echo "Deploying application..."
          # Your deployment commands here that use $MY_SECRET
          # kubectl create secret generic app-secret --from-literal=password="$MY_SECRET"
          # terraform apply -var="db_password=$MY_SECRET"ss